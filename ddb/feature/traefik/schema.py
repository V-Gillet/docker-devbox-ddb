# -*- coding: utf-8 -*-
from ddb.feature.schema import FeatureSchema
from marshmallow import fields, Schema


class ExtraServiceSchema(Schema):
    """
    Extra Service
    """
    https = fields.Bool(required=False, allow_none=True, default=None)
    url = fields.String(required=True, allow_none=False, default=None)
    domain = fields.String(required=True, allow_none=True, default=None)
    rule = fields.String(required=False, allow_none=True, default=None)


class TraefikSchema(FeatureSchema):
    """
    Traefik feature schema.
    """
    certs_directory = fields.String(required=False, allow_none=True, default=None)
    config_directory = fields.String(required=False, allow_none=True, default=None)
    mapped_certs_directory = fields.String(required=True, default="/certs")
    ssl_config_template = fields.String(required=True, default="""
# This configuration file has been automatically generated by ddb
[[tls.certificates]]
  certFile = "{{_local.certFile}}"
  keyFile = "{{_local.keyFile}}"
""".lstrip())
    extra_services = fields.Dict(fields.String(), fields.Nested(ExtraServiceSchema()), default={})
    extra_services_config_template = fields.String(required=True, default="""
# This configuration file has been automatically generated by ddb
[http.routers]
  [http.routers.extra-service-{{_local.id}}]
    rule = "{{_local.rule}}"
    entrypoints = [{% if _local.https is true %}"https"{% elif _local.https is false %}"http"{% else %}"http", "https"{% endif %}]
    service = "extra-service-{{_local.id}}"
{%- if _local.certresolver is defined %}
 [http.routers.extra-service-{{_local.service}}.tls]
    certResolver = "{{_local.certresolver}}"
{%- endif %}

[http.services]
  [http.services.extra-service-{{_local.id}}.loadBalancer]
    [[http.services.extra-service-{{_local.id}}.loadBalancer.servers]]
      url = "{{_local.url}}"
""".lstrip())
